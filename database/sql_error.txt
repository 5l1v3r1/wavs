INSERT INTO `detect`(detect_string, type) VALUES("Warning.*?\Wmysqli?_","sql");
INSERT INTO `detect`(detect_string, type) VALUES("MySQLSyntaxErrorException","sql");
INSERT INTO `detect`(detect_string, type) VALUES("valid MySQL result","sql");
INSERT INTO `detect`(detect_string, type) VALUES("check the manual that (corresponds to|fits) your MySQL server version","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Unknown column '[^ ]+' in 'field list'","sql");
INSERT INTO `detect`(detect_string, type) VALUES("MySqlClient\.","sql");
INSERT INTO `detect`(detect_string, type) VALUES("com\.mysql\.jdbc","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Zend_Db_(Adapter|Statement)_Mysqli_Exception","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Pdo[./_\\]Mysql","sql");
INSERT INTO `detect`(detect_string, type) VALUES("MySqlException","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQLSTATE\[\d+\]: Syntax error or access violation","sql");
INSERT INTO `detect`(detect_string, type) VALUES("PostgreSQL.*?ERROR","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Warning.*?\Wpg_","sql");
INSERT INTO `detect`(detect_string, type) VALUES("valid PostgreSQL result","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Npgsql\.","sql");
INSERT INTO `detect`(detect_string, type) VALUES("PG::SyntaxError:","sql");
INSERT INTO `detect`(detect_string, type) VALUES("org\.postgresql\.util\.PSQLException","sql");
INSERT INTO `detect`(detect_string, type) VALUES("ERROR:\s\ssyntax error at or near","sql");
INSERT INTO `detect`(detect_string, type) VALUES("ERROR: parser: parse error at or near","sql");
INSERT INTO `detect`(detect_string, type) VALUES("PostgreSQL query failed","sql");
INSERT INTO `detect`(detect_string, type) VALUES("org\.postgresql\.jdbc","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Pdo[./_\\]Pgsql","sql");
INSERT INTO `detect`(detect_string, type) VALUES("PSQLException","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Driver.*? SQL[\-\_\ ]*Server","sql");
INSERT INTO `detect`(detect_string, type) VALUES("OLE DB.*? SQL Server","sql");
INSERT INTO `detect`(detect_string, type) VALUES("\bSQL Server[^&lt;&quot;]+Driver","sql");
INSERT INTO `detect`(detect_string, type) VALUES("\bSQL Server[^&lt;&quot;]+[0-9a-fA-F]{8}","sql");
INSERT INTO `detect`(detect_string, type) VALUES("System\.Data\.SqlClient\.SqlException","sql");
INSERT INTO `detect`(detect_string, type) VALUES("(?s)Exception.*?\bRoadhouse\.Cms\.","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Microsoft SQL Native Client error '[0-9a-fA-F]{8}","sql");
INSERT INTO `detect`(detect_string, type) VALUES("\[SQL Server\]","sql");
INSERT INTO `detect`(detect_string, type) VALUES("ODBC SQL Server Driver","sql");
INSERT INTO `detect`(detect_string, type) VALUES("ODBC Driver \d+ for SQL Server","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQLServer JDBC Driver","sql");
INSERT INTO `detect`(detect_string, type) VALUES("com\.jnetdirect\.jsql","sql");
INSERT INTO `detect`(detect_string, type) VALUES("macromedia\.jdbc\.sqlserver","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Zend_Db_(Adapter|Statement)_Sqlsrv_Exception","sql");
INSERT INTO `detect`(detect_string, type) VALUES("com\.microsoft\.sqlserver\.jdbc","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQL(Srv|Server)Exception","sql");
INSERT INTO `detect`(detect_string, type) VALUES("\bORA-\d{5}","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Oracle error","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Oracle.*?Driver","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Warning.*?\W(oci|ora)_","sql");
INSERT INTO `detect`(detect_string, type) VALUES("quoted string not properly terminated","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQL command not properly ended","sql");
INSERT INTO `detect`(detect_string, type) VALUES("macromedia\.jdbc\.oracle","sql");
INSERT INTO `detect`(detect_string, type) VALUES("oracle\.jdbc","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Zend_Db_(Adapter|Statement)_Oracle_Exception","sql");
INSERT INTO `detect`(detect_string, type) VALUES("Pdo[./_\\](Oracle|OCI)","sql");
INSERT INTO `detect`(detect_string, type) VALUES("OracleException","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQLite/JDBCDriver","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQLite\.Exception","sql");
INSERT INTO `detect`(detect_string, type) VALUES("unrecognized token","sql");
INSERT INTO `detect`(detect_string, type) VALUES("syntax error","sql");
INSERT INTO `detect`(detect_string, type) VALUES("SQL syntax","sql");
INSERT INTO `detect`(detect_string, type) VALUES("^([^:]*:){6}[^:]*$","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("root:x:0:0:","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("[boot loader]","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("[error] [client","lfi");
INSERT INTO `detect`(detect_string, type) VALUES(" - - [","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("About php.ini","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("# Default boot by section","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("<configuration>","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("ServerRoot","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("DocumentRoot","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("deb http","lfi");
INSERT INTO `detect`(detect_string, type) VALUES("127.0.0.1       localhost","lfi");
